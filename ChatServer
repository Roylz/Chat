import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer {
  boolean serverStart = false;
	ServerSocket ss = null;
	List<Client> clients = new ArrayList<Client>();
		
	public static void main(String[] args) {
		new ChatServer().start();
	}

	public void start() {
		try {
			ss = new ServerSocket(9876);
			serverStart = true;
		} catch (BindException e) {
			System.out.println("Socket is used, close relative procedure and reboot server");
			System.exit(0);
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			while (serverStart) {
				Socket s = ss.accept();
				Client c = new Client(s);
				System.out.println("A client connected");
				new Thread(c).start();
				clients.add(c);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				ss.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	class Client implements Runnable {
		private Socket s;
		private DataInputStream dis;
		private DataOutputStream dos;
		private boolean readStart = false;

		Client(Socket s) {
			this.s = s;
			try {
				dis = new DataInputStream(s.getInputStream());
				dos = new DataOutputStream(s.getOutputStream());
				readStart = true;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void send(String str){
			try {
				dos.writeUTF(str);
			} catch (IOException e) {
				clients.remove(this);
			}
		}
		public void run() {
			try {
				while (readStart) {
					String str = dis.readUTF();
//System.out.println(str);
				for(int i = 0; i < clients.size(); i++ ){
					Client c = clients.get(i);
					c.send(str);
				}
				}								
			} catch (EOFException e) {
				System.out.print("Client closed"+ '\n');
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					if (dis != null)
						dis.close();
					if (s != null)
						s.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
